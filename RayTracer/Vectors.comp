// Initialize a default vector
vec3 initDefaultVec(){
    return vec3(0, 0, 0);
}

// Checks whether all elements of a vector are near zero for dealing with floating point inaccuracies
bool nearZero(vec3 v){
    float epsilon = 1e-5;
    return v.x < epsilon && v.y < epsilon && v.z < epsilon;
}

// Generate a random vector on the unit sphere by using the method shown in https://mathworld.wolfram.com/SpherePointPicking.html. 
vec3 randomVectorOnUnitSphere(inout uvec4 state){
    vec3 randVec = initDefaultVec();
    while (length(randVec) < 0.001){
        randVec = vec4(boxMuller(state), boxMuller(state)).xyz;
    }
    return normalize(randVec);
}

// Use Schlick's approximation to get the reflectance. Introduced the math throguh https://raytracing.github.io/books/RayTracingInOneWeekend.html. 
float reflectance(float cosTheta, float etaRatio){
    float r0 = (1 - etaRatio) / (1 + etaRatio);
    r0 = pow(r0, 2);
    return r0 + (1 - r0) * pow(1 - cosTheta, 5);
}

// Orthonormal Basis to make scattering much easier 
struct ONB {
    vec3 axis1;
    vec3 axis2;
    vec3 axis3;
};

// Orthonormal Basis to make scattering much easier with a normal vector (because the math for the cosine hemisphere scattering is derived as if the normal vector is along the z axis -> thus the setting of the unit vector in the z direction as the normal vector). Math taken from https://raytracing.github.io/books/RayTracingTheRestOfYourLife.html. This is similar to determining the unit vectors for the camera.
ONB createONB(vec3 normalVector){
    ONB basis;
    basis.axis3 = normalVector;
    vec3 a = (abs(normalVector.x) > 0.9) ? vec3(0, 1, 0) : vec3(1, 0, 0);
    basis.axis2 = normalize(cross(normalVector, a));
    basis.axis1 = cross(basis.axis3, basis.axis2);
    return basis;
}

// Transform a vector from the basis' coordinate system to the world coorinate system by multiplying out the unit vectors
vec3 transformONB(ONB basis, vec3 v){
    return (v.x * basis.axis1) + (v.y * basis.axis2) + (v.z * basis.axis3);
}

// Return the minimum component of a vector 
float minVector(vec3 v){
    return min(v.x, min(v.y, v.z));
}

// Return the maximum component of a vector 
float maxVector(vec3 v){
    return max(v.x, max(v.y, v.z));
}