// TAA with assistance from https://ubm-twvideo01.s3.amazonaws.com/o1/vault/gdc2016/Presentations/Pedersen_LasseJonFuglsang_TemporalReprojectionAntiAliasing.pdf 

// Temporal record to keep track of point hit and whether or not the ray actually hit something
struct TemporalRecord {
    bool didHit;
    vec3 pointHit;
};

// Temporally reproject previous frame to the current frame in order to keep track of movement 
ivec2 temporalReprojection(vec3 pointHit, ivec2 windowSize){
    vec4 prevPos = prevViewProj * vec4(pointHit, 1);
    vec2 texturePos = 0.5 * prevPos.xy / prevPos.w + 0.5;
    return ivec2(texturePos * windowSize);
}

// Check if the temporal reprojection is within the window. 
bool inWindow(ivec2 pixelCoord, ivec2 windowSize){
    return (0 <= pixelCoord.x && pixelCoord.x < windowSize.x) && (0 <= pixelCoord.y && pixelCoord.y < windowSize.y);
}

// Apply temporal reuse with blending across frames
void temporalReuse(vec4 prevPixel, inout vec4 pixel, float blendFactor){
    pixel = mix(prevPixel, pixel, blendFactor);
}

// Apply TAA to the frame
void applyTAA(ivec2 pixelCoord, vec4 pixel, TemporalRecord tempRecord){
    if (frameCount == 0){ // If it's the first frame or the TAA record records that it hits nothing, store the pixel in the first screen and don't apply TAA. 
        imageStore(screen1, pixelCoord, pixel);
        return;
    }

    ivec2 windowSize = imageSize(screen1); vec4 prevPixel; 
    ivec2 prevPixelCoord = temporalReprojection(tempRecord.pointHit, windowSize);

    if (!inWindow(prevPixelCoord, windowSize) || !tempRecord.didHit){ // If the previous pixel is not in the window or we didn't hit anything with first bounce, don't do a temporal reuse
        if (frameCount % 2 == 0){
            imageStore(screen1, pixelCoord, pixel);
        } else {
            imageStore(screen2, pixelCoord, pixel);
        }
        return;
    }

    float blendFactor;
    if (cameraMoving){ // If camera is moving, apply the temporal blend reduction to try and avoid occlusion
        blendFactor = temporalReuseFactor * temporalBlendReduction;
    } else {
        blendFactor = temporalReuseFactor;
    }
    
    vec3 minColor = vec3(1000000000); vec3 maxColor = vec3(-1000000000);
    
    if (frameCount % 2 == 0){ // Current screen is screen1, we want to store there
        prevPixel = imageLoad(screen2, prevPixelCoord);

        // Neighborhood clamping
        for (int i = -neighborhoodSize; i <= neighborhoodSize; i++){
            for (int j = -neighborhoodSize; j <= neighborhoodSize; j++){
                vec3 neighborColor = imageLoad(screen2, prevPixelCoord + ivec2(i, j)).rgb;
                minColor = min(minColor, neighborColor);
                maxColor = max(maxColor, neighborColor);
            }
        }
        prevPixel = clamp(prevPixel, vec4(minColor, 1), vec4(maxColor, 1));

        temporalReuse(prevPixel, pixel, blendFactor);
        imageStore(screen1, pixelCoord, pixel);
    } else {
        prevPixel = imageLoad(screen1, prevPixelCoord);
        
        // Neighborhood clamping
        for (int i = -neighborhoodSize; i <= neighborhoodSize; i++){
            for (int j = -neighborhoodSize; j <= neighborhoodSize; j++){
                vec3 neighborColor = imageLoad(screen1, prevPixelCoord + ivec2(i, j)).rgb;
                minColor = min(minColor, neighborColor);
                maxColor = max(maxColor, neighborColor);
            }
        }
        prevPixel = clamp(prevPixel, vec4(minColor, 1), vec4(maxColor, 1));

        temporalReuse(prevPixel, pixel, blendFactor);
        imageStore(screen2, pixelCoord, pixel);
    } 
}