// Struct for tInterval that makes dealing with intersections a lot easier. Idea for this was gained from https://raytracing.github.io/books/RayTracingInOneWeekend.html#movingcameracodeintoitsownclass. However, I made some modifications to better suit me 
struct Interval{
    float tMin;
    float t; 
};

// Maximum and minimum possible t values for a ray to count as intersecting an object. The min is to make sure that rays don't count when they're heading backward (like -t intersection point). The max is to ensure that the ray even should be visible on the screen. 
const float rayMin = 0.001;
const float rayMax = 1e10;

// Initialize a default tInterval with rayMin and rayMax
Interval initDefaultInterval(){
    Interval interval = {rayMin, rayMax};
    return interval; 
}

// Check if the t value that the ray intersection test returns is out of bounds of the tInterval
bool outOfBounds(Interval interval, float t){
    return t < interval.tMin || interval.t < t;
}

// Check if a value is outside the unit interval
bool outsideUnitInterval(float value){
    return value < 0 || value > 1;
}