// Hit Record struct and functions. Idea for having this implemented in order to make the code a lot cleaner came from Ray Tracing in One Weekend: https://raytracing.github.io/books/RayTracingInOneWeekend.html#movingcameracodeintoitsownclass. I made significant modifications to this structure to accomodate my non-iterative implementation.  
struct HitRecord{
    vec3 pointHit;
    Ray scatteredRay;
    bool didScatter;
    vec3 normalVector; 
    Interval tValues;
    vec3 objectColor;
    bool isLight;
    bool frontFace; 
    int materialID;
};

// Creates the default hit record
HitRecord initDefaultHitRecord(){
    HitRecord newHitRecord = {initDefaultVec(), initDefaultRay(), false, initDefaultVec(), initDefaultInterval(), initDefaultVec(), false, false, 0};
    return newHitRecord;
}

// Set the normal vector to always point against the ray for convenience later on. I should get no credit for this because this was taken from https://raytracing.github.io/books/RayTracingInOneWeekend.html#movingcameracodeintoitsownclass. 
void isFrontFace(Ray ray, inout HitRecord record){
    record.frontFace = dot(ray.direction, record.normalVector) < 0;
    record.normalVector = record.frontFace ? record.normalVector : -record.normalVector;
}