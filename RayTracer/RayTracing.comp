// Initialize the version
#version 460 core

// Import files here using the "include" statement that Python processes with string processing and txt file processing
#include "Random"
#include "Vectors"
#include "Ray"
#include "Interval"
#include "HitRecord"
#include "Camera"
#include "Sphere"

// Set up invocation size and take in the screen texture to modify it per pixel. Note that the size volume is 32 (which is optimized for NVIDIA gpus rather than AMD gpus [which prefer a size of multiples of 64])
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screen;
layout(rgba32ui, binding = 1) uniform uimage2D seeds;

layout(std430, binding = 0) buffer worldScene {
    sphere3 hittables[];
};

uniform int numHittables;
uniform viewerCamera camera;

// Create a gradient from the top of the screen to the bottom of the screen based on the ray's y direction 
vec3 gradientColor(vec3 rayDirection){
    float rayDirY = normalize(rayDirection).y;
    float t = 0.5 * (rayDirY + 1.0);

    vec3 colorTop = vec3(1.0, 1.0, 1.0);
    vec3 colorBottom = vec3(0.5, 0.7, 1.0);

    return mix(colorTop, colorBottom, t);
}

// Construct a ray from a camera to the viewport depending on the pixel coordinate
ray3 constructCameraRay(ivec2 pixelCoord){
    vec3 rayDir = camera.initPixelPos + pixelCoord.x * camera.pixelDX + pixelCoord.y * camera.pixelDY - camera.position;
    struct ray3 ray = {camera.position, rayDir};
    return ray;
}

// Check if a ray hits any hittable and update a hit record to show the ray's color and reflect that change. 
bool hit(ray3 ray, inout hitRecord record){
    bool didHit = false; 
    for (int i = 0; i < numHittables; i++){
        if (hitSphere(hittables[i], ray, record)){
            didHit = true; 
        }
    }
    return didHit;
}

// Main Function
void main(){
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy); // Get the global invocation ID in order to determine the exact pixel location. 
    uvec4 state = imageLoad(seeds, pixelCoord);
    
    ray3 cameraRay = constructCameraRay(pixelCoord); 
    hitRecord rayHitRecord = initDefaultHitRecord();
    vec4 pixel;
  
    if (hit(cameraRay, rayHitRecord)){
        pixel = rayHitRecord.rayColor;
    } else {
        pixel = vec4(gradientColor(cameraRay.direction), 1.0);
    }

    imageStore(seeds, pixelCoord, state);
    imageStore(screen, pixelCoord, pixel);
}