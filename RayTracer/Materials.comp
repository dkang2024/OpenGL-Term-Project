// Dealing with seperate structures for materials ID 0 = Lambertian material. 

// Lambertian scattering for a material (thanks to https://raytracing.github.io/books/RayTracingInOneWeekend for giving me the math necessary for this)
void lambertianScatter(inout hitRecord record, inout uvec4 state){
    ray3 scatteredRay = ray3(record.pointHit, record.normalVector + randomVectorOnUnitSphere(state));

    record.didScatter = true;
    record.scatteredRay = scatteredRay;
}

// Scattering for reflective objects with the math given by https://raytracing.github.io/books/RayTracingInOneWeekend
void reflectiveScatter(float fuzz, ray3 ray, inout hitRecord record, inout uvec4 state){
    vec3 reflectDir = reflect(ray.direction, record.normalVector);
    reflectDir = normalize(reflectDir) + fuzz * randomVectorOnUnitSphere(state);
    ray3 scatteredRay = ray3(record.pointHit, reflectDir);

    if (dot(reflectDir, record.normalVector) > 0){
        record.didScatter = true;
    } else {
        record.didScatter = false;
    }
    record.scatteredRay = scatteredRay;
}

// Scattering for objects where both refraction and reflection is possible. Math given by https://raytracing.github.io/books/RayTracingInOneWeekend.html 
void dielectricScatter(float etaRatio, ray3 ray, inout hitRecord record, inout uvec4 state){
    if (record.frontFace){
        etaRatio = 1 / etaRatio;
    } 

    vec3 unitDirection = normalize(ray.direction);
    float cosTheta = min(dot(-unitDirection, record.normalVector), 1);
    float sinTheta = sqrt(1 - pow(cosTheta, 2));

    vec3 rayDir; 
    if (etaRatio * sinTheta > 1 || reflectance(cosTheta, etaRatio) > rand(state)){
        rayDir = reflect(unitDirection, record.normalVector);
    } else {
        rayDir = refract(unitDirection, record.normalVector, etaRatio);
    }
    
    record.didScatter = true; 
    record.scatteredRay = ray3(record.pointHit, rayDir);
}

// General scattering 
void scatter(int materialID, float materialParameter, ray3 ray, inout hitRecord record, inout uvec4 state){
    if (materialID == 0){
        lambertianScatter(record, state);
    } else if (materialID == 1){
        reflectiveScatter(materialParameter, ray, record, state);
    } else if (materialID == 2){
        dielectricScatter(materialParameter, ray, record, state);
    } else if (materialID == 3){
        record.isLight = true;
    }
}

