// Dealing with seperate structures for materials
const int LAMBERTIAN = 0;
const int REFLECTIVE = 1;
const int DIELECTRIC = 2;
const int LIGHT = 3;

const float RAY_ERROR_BOUND = 0.001;

// General material structure to hold important information (so that each voxel doesn't hold this information but rather an index to this material)
struct Material {
    vec3 color;
    int materialID;
    float materialParameter;
    int textureID;
    vec2 padding;
};

// Scatter the ray according to a scattered point hit and a scattered direction. Add a little bit to the hit point in the scattered direction to prevent rehitting the same voxel 
Ray scatterRay(vec3 pointHit, vec3 scatteredDir){
    return Ray(pointHit + scatteredDir * RAY_ERROR_BOUND, scatteredDir);
}

// Lambertian scattering for a material (thanks to https://raytracing.github.io/books/RayTracingInOneWeekend for giving me the math necessary for this)
void lambertianScatter(inout HitRecord record, inout uvec4 state){
    ONB basis = createONB(record.normalVector);
    vec3 scatteredDir = normalize(transformONB(basis, randomCosineSample(state)));
    Ray scatteredRay = scatterRay(record.pointHit, scatteredDir);

    record.didScatter = true;
    record.scatteredRay = scatteredRay;
}

// Lambertian BRDF 
vec3 lambertianBRDF(vec3 objectColor){
    return objectColor / PI;
}

float lambertianPDF(vec3 normalVector, vec3 scatteredDir){
    return scatteredCos(normalVector, scatteredDir) / PI;
}

// Scattering for reflective objects with the math given by https://raytracing.github.io/books/RayTracingInOneWeekend
void reflectiveScatter(float fuzz, Ray ray, inout HitRecord record, inout uvec4 state){
    vec3 reflectDir = reflect(ray.direction, record.normalVector);
    reflectDir = normalize(reflectDir) + fuzz * randomVectorOnUnitSphere(state);
    Ray scatteredRay = scatterRay(record.pointHit, reflectDir);

    if (dot(reflectDir, record.normalVector) > 0){
        record.didScatter = true;
    } else {
        record.didScatter = false;
    }
    record.scatteredRay = scatteredRay;
}

// Scattering for objects where both refraction and reflection is possible. Math given by https://raytracing.github.io/books/RayTracingInOneWeekend.html 
void dielectricScatter(float etaRatio, Ray ray, inout HitRecord record, inout uvec4 state){
    if (record.frontFace){
        etaRatio = 1 / etaRatio;
    } 

    vec3 unitDirection = normalize(ray.direction);
    float cosTheta = min(dot(-unitDirection, record.normalVector), 1);
    float sinTheta = sqrt(1 - pow(cosTheta, 2));

    vec3 rayDir; 
    if (etaRatio * sinTheta > 1 || reflectance(cosTheta, etaRatio) > rand(state)){
        rayDir = reflect(unitDirection, record.normalVector);
    } else {
        rayDir = refract(unitDirection, record.normalVector, etaRatio);
    }
    
    record.didScatter = true; 
    record.scatteredRay = scatterRay(record.pointHit, rayDir);
}

// General scattering 
void scatter(int materialID, float materialParameter, Ray ray, inout HitRecord record, inout uvec4 state){
    record.materialID = materialID;
    if (materialID == LAMBERTIAN){
        lambertianScatter(record, state);
    } else if (materialID == REFLECTIVE){
        reflectiveScatter(materialParameter, ray, record, state);
    } else if (materialID == DIELECTRIC){
        dielectricScatter(materialParameter, ray, record, state);
    } else if (materialID == LIGHT){
        if (!record.frontFace){
            record.objectColor = vec3(0);
        }
        record.isLight = true;
    }
}

