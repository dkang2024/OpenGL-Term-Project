// Initialize the version
#version 460 core

// Set up invocation size and take in the screen texture to modify it per pixel. Note that the size volume is 32 (which is optimized for NVIDIA gpus rather than AMD gpus [which prefer a size of multiples of 64])
layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screen1;
layout(rgba32f, binding = 1) uniform image2D screen2;

uniform int frameCount;

// Get the current and previous color based on the frame count
void getCurColor(ivec2 pixelCoord, inout vec4 currColor, inout vec4 prevColor){
    if (frameCount % 2 == 0){
        currColor = imageLoad(screen1, pixelCoord);
        prevColor = imageLoad(screen2, pixelCoord);
    } else {
        currColor = imageLoad(screen2, pixelCoord);
        prevColor = imageLoad(screen1, pixelCoord);
    }
}

// Store the final color to the correct image for rendering
void storeToImage(ivec2 pixelCoord, vec4 finalColor){
    if (frameCount % 2 == 0){
        imageStore(screen1, pixelCoord, finalColor);
    } else { 
        imageStore(screen2, pixelCoord, finalColor);
    }
}

void main(){
    if (frameCount == 0){ // If it's the first frame, don't do anything because we can't apply TAA yet
        return;
    }

    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy); // Get the global invocation ID in order to determine the exact pixel location. 
    
    vec4 currColor; vec4 prevColor;
    getCurColor(pixelCoord, currColor, prevColor);

    storeToImage(pixelCoord, mix(prevColor, currColor, 0.01));
}